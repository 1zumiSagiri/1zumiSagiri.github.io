<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://1zumisagiri.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://1zumisagiri.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-11T02:13:49+00:00</updated><id>https://1zumisagiri.github.io/feed.xml</id><title type="html">Vincent Chan</title><subtitle>A simple blog. </subtitle><entry><title type="html">Set up SSH public key authentication for remote server</title><link href="https://1zumisagiri.github.io/blog/2024/ssh-key-auth/" rel="alternate" type="text/html" title="Set up SSH public key authentication for remote server"/><published>2024-12-01T15:00:00+00:00</published><updated>2024-12-01T15:00:00+00:00</updated><id>https://1zumisagiri.github.io/blog/2024/ssh-key-auth</id><content type="html" xml:base="https://1zumisagiri.github.io/blog/2024/ssh-key-auth/"><![CDATA[<p>Whenever you have a personal VPS or a corporate server that allows public access, if you open the SSH password login authentication method on port 22, you will be vulnerable to brute-force attacks. You can use <a href="https://github.com/fail2ban/fail2ban">fail2ban</a> or <a href="https://www.sshguard.net/">sshguard</a> to protect your server from these attacks or change the default port to a non-standard port. However, the relatively safe and simple way to protect your server is to disable password authentication and use public key authentication instead.</p> <p>Suppose we configure SSH to connect from computer A to server B using public key authentication.</p> <p>When you attempt to connect to server B from computer A, the server generates a session-based random challenge and sends it to computer A. Computer A uses its private key to sign the challenge and returns the signed result to the server. The server then verifies the signature using the corresponding public key stored on the server. If the verification succeeds, it confirms that computer A possesses the private key matching the public key, thereby authenticating the client. The server then allows the connection and establishes a secure communication session. Throughout this process, the private key remains securely stored on the client, and all communication is encrypted to prevent interception or tampering.</p> <h2 id="1---generate-ssh-key-pair-on-computer-a">1 - Generate SSH key pair on computer A</h2> <p>Type the following command in the terminal to generate an SSH key pair:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> ed25519 <span class="nt">-C</span> <span class="s2">"example@example.com"</span>
</code></pre></div></div> <p>This command generates an SSH key pair using the <a href="https://en.wikipedia.org/wiki/EdDSA">ed25519</a> algorithm. The key pair will be stored in the <code class="language-plaintext highlighter-rouge">~/.ssh</code> directory by default if you press <code class="language-plaintext highlighter-rouge">Enter</code> without specifying a file path. When prompted to enter a passphrase, it is recommended to enter a passphrase to protect your private key. The SSH key pair consists of a public key (e.g., <code class="language-plaintext highlighter-rouge">id_ed25519.pub</code>) and a private key (e.g., <code class="language-plaintext highlighter-rouge">id_ed25519</code>) in the <code class="language-plaintext highlighter-rouge">~/.ssh</code> directory.</p> <p>Use <a href="https://en.wikipedia.org/wiki/RSA_(cryptosystem)">RSA</a> algorithm by replacing <code class="language-plaintext highlighter-rouge">-t ed25519</code> with <code class="language-plaintext highlighter-rouge">-t rsa -b 4096</code> if the server does not support the ed25519 algorithm.</p> <h2 id="2---copy-the-public-key-of-computer-a-to-server-b">2 - Copy the public key of computer A to server B</h2> <p>Use the following command to get your public key:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> ~/.ssh/id_ed25519.pub
</code></pre></div></div> <p>Output should look like this:</p> <pre><code class="language-Markdown">ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIB8J6 example@example.com
</code></pre> <p>Log into server B, create the <code class="language-plaintext highlighter-rouge">~/.ssh</code> directory if it does not exist, and append the public key to the <code class="language-plaintext highlighter-rouge">~/.ssh/authorized_keys</code> file:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> ~/.ssh
<span class="nb">echo</span> <span class="s2">"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIB8J6 example@example.com"</span> <span class="o">&gt;&gt;</span> ~/.ssh/authorized_keys
</code></pre></div></div> <p>Then, make sure the permissions are set correctly:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod </span>700 ~/.ssh
<span class="nb">chmod </span>600 ~/.ssh/authorized_keys
</code></pre></div></div> <h2 id="3---disable-password-authentication-on-server-b">3 - Disable password authentication on server B</h2> <p>Edit the SSH configuration file on server B:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vim /etc/ssh/sshd_config.d/20-force_publickey_auth.conf
</code></pre></div></div> <p>Add the following lines to the configuration file, then save and close the file:</p> <pre><code class="language-Markdown">PasswordAuthentication no
AuthenticationMethods publickey
</code></pre> <p>It is also recommended to add an additional configuration to disable root login:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vim /etc/ssh/sshd_config.d/20-deny_root.conf
</code></pre></div></div> <p>Add the following line to the configuration file, then save and close the file:</p> <pre><code class="language-Markdown">PermitRootLogin no
</code></pre> <h2 id="4---restart-the-ssh-service-on-server-b">4 - Restart the SSH service on server B</h2> <p>Restart the SSH service to apply the changes:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl restart sshd
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[Whenever you have a personal VPS or a corporate server that allows public access, if you open the SSH password login authentication method on port 22, you will be vulnerable to brute-force attacks. You can use fail2ban or sshguard to protect your server from these attacks or change the default port to a non-standard port. However, the relatively safe and simple way to protect your server is to disable password authentication and use public key authentication instead.]]></summary></entry><entry><title type="html">Moving files to remote server using SCP</title><link href="https://1zumisagiri.github.io/blog/2024/scp-walkthrough/" rel="alternate" type="text/html" title="Moving files to remote server using SCP"/><published>2024-08-01T15:00:00+00:00</published><updated>2024-08-01T15:00:00+00:00</updated><id>https://1zumisagiri.github.io/blog/2024/scp-walkthrough</id><content type="html" xml:base="https://1zumisagiri.github.io/blog/2024/scp-walkthrough/"><![CDATA[<p>Feel free to come to office hours if youâ€™re new to using command line!</p> <h2 id="0---make-sure-you-connect-to-a-ub-network">0 - Make sure you connect to a UB network</h2> <p>CSE department server <code class="language-plaintext highlighter-rouge">turing.cse.buffalo.edu</code> is accessible only from the UB campus. Go to next section if you are on campus or living in dorms.</p> <p>If you are off campus, you will need to use the <a href="https://www.buffalo.edu/ubit/service-guides/connecting/vpn/computer.html">UB VPN</a>. You can also use <code class="language-plaintext highlighter-rouge">cerf.cse.buffalo.edu</code>. If you are using <code class="language-plaintext highlighter-rouge">cerf</code>, replace <code class="language-plaintext highlighter-rouge">turing</code> with <code class="language-plaintext highlighter-rouge">cerf</code> in the following commands.</p> <h2 id="1---open-a-terminal">1 - Open a terminal</h2> <p>For Linux/Mac users, use the <code class="language-plaintext highlighter-rouge">Terminal.app</code> or any other terminal emulator you have.</p> <p>For Windows users, you may want to use <a href="https://learn.microsoft.com/en-us/powershell/scripting/windows-powershell/starting-windows-powershell">PowerShell</a>. To set up <code class="language-plaintext highlighter-rouge">PowerShell</code> to use <code class="language-plaintext highlighter-rouge">scp</code>, you need to install <code class="language-plaintext highlighter-rouge">OpenSSH</code>, see this <a href="https://learn.microsoft.com/en-us/windows/terminal/tutorials/ssh">tutorial</a> for details. To connect to the CSE server, you only need to install the <code class="language-plaintext highlighter-rouge">OpenSSH client</code> feature.</p> <h2 id="2---locate-the-directory-where-your-template-files-are">2 - Locate the directory where your template files are</h2> <p>Once you have downloaded the template files, use command <code class="language-plaintext highlighter-rouge">cd</code> to navigate to the parent directory of the folder where the template codes are located, and use command <code class="language-plaintext highlighter-rouge">ls</code> to check if the current directory contains your folder. For example, if the files are located in the folder <code class="language-plaintext highlighter-rouge">HW0C++</code>, it would look like this:</p> <pre><code class="language-Markdown">vincent@local_machine ~ % cd Downloads/331
vincent@local_machine 331 % ls
HW0C++
vincent@local_machine 331 % ls HW0C++
Driver.cpp  HW0Utility.h  outputs  Solution.cpp  testcases  Utility.h
vincent@local_machine 331 %
</code></pre> <p>Check out the <a href="https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Command_line#navigation_on_the_command_line">link</a> if you are not familiar with basic commands.</p> <h2 id="3---transfer-files-to-the-remote-server">3 - Transfer files to the remote server</h2> <p>To transfer files to the remote server, use command <code class="language-plaintext highlighter-rouge">scp</code>. For example, my UBIT name is <code class="language-plaintext highlighter-rouge">vc331</code> and I want to transfer the folder <code class="language-plaintext highlighter-rouge">HW0C++</code> to the remote server. The command would look like this:</p> <pre><code class="language-Markdown">vincent@local_machine 331 % scp -r HW0C++ vc331@turing.cse.buffalo.edu:~
vc331@turing.cse.buffalo.edu's password:
Solution.cpp                   100%  884    37.6KB/s   00:00
input5.txt                     100%   25KB 555.2KB/s   00:00
input1.txt                     100%  250    10.9KB/s   00:00
input2.txt                     100%  501    20.0KB/s   00:00
Utility.h                      100%  159     6.7KB/s   00:00
Driver.cpp                     100%  653    30.5KB/s   00:00
output5.txt                    100%   36KB 504.6KB/s   00:00
output1.txt                    100%  318    13.1KB/s   00:00
output2.txt                    100%  728    31.0KB/s   00:00
HW0Utility.h                   100%  647    29.3KB/s   00:00
vincent@local_machine 331 %
</code></pre> <p>Terminal will prompt you to enter your password, you wonâ€™t see the password as you type it.</p> <h2 id="4---ssh-into-the-remote-server">4 - SSH into the remote server</h2> <p>Now you can login to the server using command <code class="language-plaintext highlighter-rouge">ssh</code>. It is better to keep your current terminal tab open for file transfer and open an additional tab for <code class="language-plaintext highlighter-rouge">ssh</code> and test your implementation on the <code class="language-plaintext highlighter-rouge">turing</code> server. For example, my UBIT name is <code class="language-plaintext highlighter-rouge">vc331</code>, the command would look like this:</p> <pre><code class="language-Markdown">vincent@local_machine 331 % ssh vc331@turing.cse.buffalo.edu
vc331@turing.cse.buffalo.edu's password:
vc331@turing:~$
</code></pre> <p>To check if the files have been successfully transferred, use command <code class="language-plaintext highlighter-rouge">ls</code> to list the folders and files in the current directory. You should see the folder <code class="language-plaintext highlighter-rouge">HW0C++</code> in the list:</p> <pre><code class="language-Markdown">vc331@turing:~$ ls
HW0C++ HW0Java HW0Python
vc331@turing:~$
</code></pre> <h2 id="5---compile-and-run-your-code">5 - Compile and run your code</h2> <p>To run your code, navigate to the directory where your code is located and compile it. To compile and run your code on <code class="language-plaintext highlighter-rouge">input1.txt</code>, you can use the following commands, depending on the language you are using:</p> <ul id="lang" class="tab" data-tab="27d78cfd-4fc3-4b4e-892a-38cb6aa75723" data-name="lang"> <li class="active" id="lang-c--"> <a href="#">C++ </a> </li> <li id="lang-java"> <a href="#">Java </a> </li> <li id="lang-python"> <a href="#">Python </a> </li> </ul> <ul class="tab-content" id="27d78cfd-4fc3-4b4e-892a-38cb6aa75723" data-name="lang"> <li class="active"> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vc331@turing:~<span class="nv">$ </span><span class="nb">cd </span>HW0C++
vc331@turing:~/HW0C++<span class="nv">$ </span>g++ <span class="nt">-std</span><span class="o">=</span>c++11 Driver.cpp
vc331@turing:~/HW0C++<span class="nv">$ </span>./a.out testcases/input1.txt
</code></pre></div></div> </li> <li> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vc331@turing:~<span class="nv">$ </span><span class="nb">cd </span>HW0Java
vc331@turing:~/HW0Java<span class="nv">$ </span>javac src/ub/cse/algo/<span class="k">*</span>.java
vc331@turing:~/HW0Java<span class="nv">$ </span>java <span class="nt">-cp</span> <span class="s2">"src"</span> ub.cse.algo.Driver testcases/input1.txt
</code></pre></div></div> </li> <li> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vc331@turing:~<span class="nv">$ </span><span class="nb">cd </span>HW0Python
vc331@turing:~/HW0Python<span class="nv">$ </span>python Driver.py testcases/input1.txt
</code></pre></div></div> </li> </ul> <p>Compare your output with <code class="language-plaintext highlighter-rouge">outputs/output1.txt</code> to see if your code is correct, and test your code with other test cases.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Feel free to come to office hours if youâ€™re new to using command line!]]></summary></entry></feed>